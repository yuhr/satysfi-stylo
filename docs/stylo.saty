@require: stdjareport
@require: enumitem/enumitem
@require: base/list-ext
@require: base/tuple
@import: ../src/stylo
@import: local

document (|
  title = {Stylo: the diagram toolkit for \SATySFi;};
  author = {Yu Shimura};
|) '<
  +p {
    Stylo is a satysfactory graphics library which focuses on drawing geometrical diagrams in its entirety. Rendered diagrams are meant to be comparable to \Xy;-pic package of \LaTeX;, but the code looks readable and descriptive.
  }
  +diagram {
    \stylo((0cm, 2cm, 2cm))(
      open Path in
      let s = (0cm, -1cm) in
      let n = (0cm, 1cm) in
      [
        start-from s
        |> arc-thru-to n (4cm, 0cm)
        |> arc-thru-to s (2cm, 0cm)
        |> arc-thru-to n (1cm, 0cm)
        |> arc-thru-to s (0.5cm, 0cm)
        |> arc-thru-to n (0.25cm, 0cm)
        |> arc-thru-to s (0cm, 0cm)
        |> arc-thru-to n (-0.25cm, 0cm)
        |> arc-thru-to s (-0.5cm, 0cm)
        |> arc-thru-to n (-1cm, 0cm)
        |> arc-thru-to s (-2cm, 0cm)
        |> arc-thru-to n (-4cm, 0cm)
        |> solid;
      ]
    );
  }


  +chapter {Getting started} <
    +p {
      To use Stylo in your document, at first you need to `@require: stylo/stylo`. TBW
    }
  >


  +chapter {Concepts and datatypes} <
    +diagram {
      TBW (some amazing art)
    }
    +p {
      TBW
    }

    +section {Geometricals} <
      +p {
        Concepts described under this section are purely geometrical and are essentially not tied to actual style when rendered.
      }
      +subsection {Points} <
        +diagram {
          TBW (illustration of the Big Dipper?)
        }
        +p {
          A point is one of the most primitive object in the world of graphics.
        }
      >
      +subsection {Paths} <
        +diagram {
          TBW
        }
        +p {
          A path—that's all about diagrams. Stylo uses its own implementation of path instead of \SATySFi;'s built-in one, in order to achieve a series of manipulation around paths in depth. Constructed paths are translated into built-in representations at the time of rendering.
        }
      >
      +subsection {Positions} <
        +diagram {
          TBW
        }
        +p {
          A position is a waypoint on a path. Some operations require some positions on a path to be specified by scalar values. Usually, in the term of specifying these positions, paths are always treated as if the starting point and ending point are connected to each other, regardless of being closed or not. That is:
        }
        +listing {
          * When specified values are negative, interpreted backwardedly from the ending point of the path.
          * When the absolutes of specified values exceed the total length of the path, interpreted cyclically through the path.
        }
        +p {
          Positions can be specified in scale or length. That is:
        }
        +listing {
          * When in scale, interpreted assuming `0.0` and `1.0` are the starting point and the ending point of the path respectively.
          * When in length, interpreted assuming `0cm` is the starting point of the path.
        }
        +p {
          Stylo's internal representations of lengths are all in centimeters, thereby returned lengths of measurement functions are all in centimeters.
        }
      >
      +subsection {Angles} <
        +diagram {
          TBW (some angels?)
        }
        +p {
          Angles can be specified in radians or degrees. Stylo's internal representations of angles are all in radians, thereby returned angles of measurement functions are all in radians.
        }
      >
    >

    +section {Decoratives} <
      +p {
        In this section, style-related concepts and predefined decoratives are shown in series.
      }
      +listing {
        * TBW
      }
      +subsection {Pins} <
        +diagram {
          TBW
        }
        +p {
          Pins are used to indicate specific points in the diagram.
        }
        +p {
          A pin is actually a small footage with its origin point placed at a given point. Thereby any types of complex paths can be used as pins, including labels.
        }
        +p {
          Pins are oftenly used as arrowheads but also can be used as a pseudo-arrowshaft by splitting a path into multiple subpaths.
        }
      >
      +subsection {Wires} <
        +diagram {
          TBW
        }
        +p {
          Wires can indicate lines and curves in the diagram. Oftenly wires are used as arrowshafts.
        }
      >
      +subsection {Labels} <
        +diagram {
          TBW
        }
        +p {
          TBW
        }
      >
    >

    +section {Footages} <
      +p {
        A footage is a ready-to-render object containing a decorated path or a label, but still accepts some manipulations such as affine transformations and configurations of contextual options.
      }
    >
  >


  +chapter {Constructs and Commands} <
    +p {
      In the world of Stylo, the noun “construct” refers to commands that takes some paths and returns some paths modifying them. There's a set of commands for drawing, measuring and decorating paths.
    }

    +section {Constructing paths} <
      +p {
        Paths can be constructed from scratch. Unlike \SATySFi;'s path implementation, Stylo has no concept of “pre-path”. Constructs always return complete paths closed or not. When constructing paths by hand, basically manipulated paths are open, so if you want to close them you need to connect the starting point and the ending point manually and pass them into `finish`.
      }
      +subsection {Terminative constructs} <
        +command (`start-from`) (tPT --> tPATH) {
          Starts a path from a given point.
        }
        +command (`start-with-tangent`) (tPT --> (tPT --> tPATH)) {
          Starts a path from a second given point, with the pre-start tangent from a first given point. The tangent can be referred by the next construct such as `arc-to-with-tangents`. This phantom tangent does not affect to the second or further next constructs in any way, including the path closing.
        }
        +command (`finish`) (tPATH --> tPATH) {
          Closes a path if the last point is meeting to the starting point, elsewise leaves it open.
        }
        +command (`restart`) (tPATH --> tPATH) {
          Opens a path if closed. Usually you don't need to use this construct because most other constructs implicitly reopen if closed.
        }
        +command (`restart-at`) (tPOS --> (tPATH --> tPATH)) {
          Restarts the path from a given position. The path portion after the position is discarded.
        }
      >
      +subsection {Lines and curves} <
        +p {
          You can draw each segment of a path step by step using these constructs.
        }
        +command (`line-to`) (tPT --> (tPATH --> tPATH)) {
          Draws a straight line to a given point.
        }
        +command (`bezier-to`) (tTUPLE tPT [tPT; tPT] --> (tPATH --> tPATH)) {
          Draws a Bézier curve to the last given point with the first two given control points.
        }
      >
      +subsection {Arcs} <
        +p {
          Stylo has a powerful set of constructs for drawing arcs in different ways. These constructs generates one or more segments onto the path.
        }
        +command (`arc-by-around`) (tPT --> (tA --> (tPATH --> tPATH))) {
          Draws an arc around a given point, with a given angle.
        }
        +command (`arc-by-aside`) (tL --> (tA --> (tPATH --> tPATH))) {
          Draws an arc around a given point which is a given length away from the current point orthogonally to the current tangent, with a given angle. Positive length means the left direction.
        }
        +command (`arc-to-with-tangents`) (tPT --> (tPT --> (tPATH --> tPATH))) {
          Draws an arc, followed by a line if needed, to the first given point, referring the current tangent and the second given point as a forwarding tangent. As a result, the arc drawn is smoothly tangented to the current path and also to the subsequent construct as long as it uses the identical point to the forwarding tangent as its starting tangent. See the illustration below:
        }
        +demo () (
          []
        );
        +command (`arc-to-with-tangents-counter`) (tPT --> (tPT --> (tPATH --> tPATH))) {
          Same as `arc-to-with-tangents`, except that it draws the counter arc against what `arc-to-for` draws thereby tangented like a pair of needles. Not implemented yet.
        }
      >
      +subsection {Tracing another path} <
        +p {
          Not implemented yet.
        }
      >
    >

    +section {Predefined shapes} <
      +p {
        TBW
      }
      +subsection {Arrows} <
        +diagram {
          TBW
        }
        +p {
          An arrow is constructed from a wire and one or two pin(s). TBW
        }
      >
    >

    +section {Splicing paths} <
      +p {
        Splicing constructed paths is one of the main ways to produce complex paths.
      }
      +subsection {Splitting} <
        +p {
          Paths can be splitted into subpaths at an arbitrary position.
        }
        +command (`split-at`) (tPOS --> (tPATH --> tTUPLE tPATH [tPATH])) {
          Splits a path in two at a given position.
        }
        % +diagram {
        %   \stylo((0cm, 2cm, 2cm))(
        %     open Path in
        %     let start = start-from (0cm, 0cm) in
        %     let arc-by = arc-by-around (0cm, 1cm) in
        %     let circle = start |> arc-by (Degrees 360.0) |> finish in
        %     let count = 5 in
        %     circle
        %     |> List.repeat count
        %     |> List.mapi (fun i f -> f
        %       |> split-at (Scale (Float.of-int (i + 1) *. 1.0 /. Float.of-int count))
        %       |> Pair.fst
        %       |> solid
        %       |> Footage.translate (-5cm +' 2.5cm *' Float.of-int i, 0cm))
        %   );
        % }
        +command (`split-into`) (tI --> (tPATH --> tLIST tPATH)) {
          Splits a path into a given number of subpaths. Passing a zero returns an empty list.
        }
        +command (`split-incr`) (tPOS --> (tPATH --> tLIST tPATH)) {
          Splits a path in increments of a given position. The incremental position can be negative. When positive, the fractioned subpath comes in last, and vice versa. Passing a zero always results in an infinite loop. Unusually, when the incremental position longer than the length of the path, no split is performed and it returns just the original path wrapped in a list.
        }
      >
      +subsection {Trimming} <
        +p {
          Paths can be trimmed at an arbitrary endpositions. 切り落としの始端位置から終端位置への向きがパスを逆行する場合、切り出されるパスの向きもそれに従う。Not implemented yet.
        }
        +command (`trim-within`) (tTUPLE tPOS [tPOS] --> (tPATH --> tPATH)) {
          Trims a path at given endpositions.
        }
      >
    >

    +section {Measuring} <
      +p {
        Stylo provides a set of features that supports measuring distances, lengths, areas and angles amongst geometrical objects.
      }
      +subsection {Distances} <
        +p {
          TBW
        }
      >
      +subsection {Lengths} <
        +p {
          TBW
        }
        +command (`length-of`) (tPATH --> (tL)) {
          Measures the total length of a given path. The returned length is an approximate value within the set tolerance, especially when the path has some curves.
        }
      >
      +subsection {Areas} <
        +p {
          TBW
        }
      >
      +subsection {Angles} <
        +p {
          TBW
        }
      >
    >

    +section {Compositing paths} <
      +p {
        Not implemented yet.
      }
      +subsection {Boolean operations} <
        +p {
          Not implemented yet.
        }
      >
    >

    +section {Transforming paths} <
      +p {
        Stylo supports affine transformations of paths and footages. Not implemented yet.
      }
    >
  >


  +chapter {Syntax sugars} <
    +p {
      Stylo provides some syntax sugars for specific use cases.
    }

    +section {Grid layout} <
      +p {
        An equivalent feature to \Xy;-matrix of \Xy;-pic. Not implemented yet.
      }
    >
  >
>